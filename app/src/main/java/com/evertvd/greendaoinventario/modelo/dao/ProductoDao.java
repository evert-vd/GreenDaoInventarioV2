package com.evertvd.greendaoinventario.modelo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.evertvd.greendaoinventario.modelo.Zona;

import com.evertvd.greendaoinventario.modelo.Producto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTO".
*/
public class ProductoDao extends AbstractDao<Producto, Long> {

    public static final String TABLENAME = "PRODUCTO";

    /**
     * Properties of entity Producto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Codigo = new Property(1, Integer.class, "codigo", false, "CODIGO");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Stock = new Property(3, Double.class, "stock", false, "STOCK");
        public final static Property Tipo = new Property(4, String.class, "tipo", false, "TIPO");
        public final static Property Estado = new Property(5, Integer.class, "estado", false, "ESTADO");
        public final static Property Zona_id = new Property(6, Long.class, "zona_id", false, "ZONA_ID");
    }

    private DaoSession daoSession;

    private Query<Producto> zona_ProductoListQuery;

    public ProductoDao(DaoConfig config) {
        super(config);
    }
    
    public ProductoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODIGO\" INTEGER," + // 1: codigo
                "\"DESCRIPCION\" TEXT," + // 2: descripcion
                "\"STOCK\" REAL," + // 3: stock
                "\"TIPO\" TEXT," + // 4: tipo
                "\"ESTADO\" INTEGER," + // 5: estado
                "\"ZONA_ID\" INTEGER);"); // 6: zona_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PRODUCTO_ZONA_ID ON PRODUCTO" +
                " (\"ZONA_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Producto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindLong(2, codigo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        Double stock = entity.getStock();
        if (stock != null) {
            stmt.bindDouble(4, stock);
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(5, tipo);
        }
 
        Integer estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(6, estado);
        }
 
        Long zona_id = entity.getZona_id();
        if (zona_id != null) {
            stmt.bindLong(7, zona_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Producto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer codigo = entity.getCodigo();
        if (codigo != null) {
            stmt.bindLong(2, codigo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        Double stock = entity.getStock();
        if (stock != null) {
            stmt.bindDouble(4, stock);
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(5, tipo);
        }
 
        Integer estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(6, estado);
        }
 
        Long zona_id = entity.getZona_id();
        if (zona_id != null) {
            stmt.bindLong(7, zona_id);
        }
    }

    @Override
    protected final void attachEntity(Producto entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Producto readEntity(Cursor cursor, int offset) {
        Producto entity = new Producto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // codigo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descripcion
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // stock
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tipo
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // estado
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // zona_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Producto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigo(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStock(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTipo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEstado(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setZona_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Producto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Producto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Producto entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "productoList" to-many relationship of Zona. */
    public List<Producto> _queryZona_ProductoList(Long zona_id) {
        synchronized (this) {
            if (zona_ProductoListQuery == null) {
                QueryBuilder<Producto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Zona_id.eq(null));
                zona_ProductoListQuery = queryBuilder.build();
            }
        }
        Query<Producto> query = zona_ProductoListQuery.forCurrentThread();
        query.setParameter(0, zona_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getZonaDao().getAllColumns());
            builder.append(" FROM PRODUCTO T");
            builder.append(" LEFT JOIN ZONA T0 ON T.\"ZONA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Producto loadCurrentDeep(Cursor cursor, boolean lock) {
        Producto entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Zona zona = loadCurrentOther(daoSession.getZonaDao(), cursor, offset);
        entity.setZona(zona);

        return entity;    
    }

    public Producto loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Producto> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Producto> list = new ArrayList<Producto>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Producto> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Producto> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
