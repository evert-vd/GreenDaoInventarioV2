package com.evertvd.greendaoinventario.modelo;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.evertvd.greendaoinventario.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.greendaoinventario.modelo.dao.ConteoDao;
import com.evertvd.greendaoinventario.modelo.dao.ProductoDao;
import com.evertvd.greendaoinventario.modelo.dao.ZonaDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "PRODUCTO".
 */
@Entity(active = true)
public class Producto {

    @Id(autoincrement = true)
    private Long id;
    private Integer codigo;
    private String descripcion;
    private Double stock;
    private String tipo;
    private Integer estado;

    @Index
    private Long zona_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ProductoDao myDao;

    @ToOne(joinProperty = "zona_id")
    private Zona zona;

    @Generated
    private transient Long zona__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "producto_id")
    })
    private List<Conteo> conteoList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Producto() {
    }

    public Producto(Long id) {
        this.id = id;
    }

    @Generated
    public Producto(Long id, Integer codigo, String descripcion, Double stock, String tipo, Integer estado, Long zona_id) {
        this.id = id;
        this.codigo = codigo;
        this.descripcion = descripcion;
        this.stock = stock;
        this.tipo = tipo;
        this.estado = estado;
        this.zona_id = zona_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getCodigo() {
        return codigo;
    }

    public void setCodigo(Integer codigo) {
        this.codigo = codigo;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public Double getStock() {
        return stock;
    }

    public void setStock(Double stock) {
        this.stock = stock;
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public Integer getEstado() {
        return estado;
    }

    public void setEstado(Integer estado) {
        this.estado = estado;
    }

    public Long getZona_id() {
        return zona_id;
    }

    public void setZona_id(Long zona_id) {
        this.zona_id = zona_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Zona getZona() {
        Long __key = this.zona_id;
        if (zona__resolvedKey == null || !zona__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ZonaDao targetDao = daoSession.getZonaDao();
            Zona zonaNew = targetDao.load(__key);
            synchronized (this) {
                zona = zonaNew;
            	zona__resolvedKey = __key;
            }
        }
        return zona;
    }

    @Generated
    public void setZona(Zona zona) {
        synchronized (this) {
            this.zona = zona;
            zona_id = zona == null ? null : zona.getId();
            zona__resolvedKey = zona_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Conteo> getConteoList() {
        if (conteoList == null) {
            __throwIfDetached();
            ConteoDao targetDao = daoSession.getConteoDao();
            List<Conteo> conteoListNew = targetDao._queryProducto_ConteoList(id);
            synchronized (this) {
                if(conteoList == null) {
                    conteoList = conteoListNew;
                }
            }
        }
        return conteoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetConteoList() {
        conteoList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
